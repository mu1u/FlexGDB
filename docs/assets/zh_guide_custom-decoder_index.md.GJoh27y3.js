import{_ as s,c as i,o as a,a4 as p}from"./chunks/framework.C9KBZyuy.js";const e="/assets/decode_example.Kb0LJVLg.png",n="/assets/encode_example.CSGiVBcN.png",l="/assets/flow.DZvIre1h.png",h="/assets/add_decoder.KUkM09Ep.png",t="/assets/add_encoder.CPO2B9sk.png",k="/assets/decode_list.DOU10Y6U.png",_=JSON.parse('{"title":"自定义解码/编码器","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"zh/guide/custom-decoder/index.md","filePath":"zh/guide/custom-decoder/index.md"}'),d={name:"zh/guide/custom-decoder/index.md"},o=p('<h1 id="自定义解码-编码器" tabindex="-1">自定义解码/编码器 <a class="header-anchor" href="#自定义解码-编码器" aria-label="Permalink to &quot;自定义解码/编码器&quot;">​</a></h1><p>Tiny RDM除了内置部分常用的解码方式（包括Base64/GZip/Deflate/ZStd/Brotli/Msgpack等），也支持用户自定义解码器和编码器，来满足更复杂的数据解析。</p><h2 id="相关概念术语" tabindex="-1">相关概念术语 <a class="header-anchor" href="#相关概念术语" aria-label="Permalink to &quot;相关概念术语&quot;">​</a></h2><p><code>解码器</code>：将数据库中读取到的原始内容，转换为友好的人类可读格式，便于展示和编辑。</p><p><img src="'+e+'" alt="解码示例图"></p><p><code>编码器</code>：将人类可读格式下的内容，重新转回原始数据，用于保存到数据库中。</p><p><img src="'+n+'" alt="编码示例图"></p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>Tiny RDM通过执行外部应用程序来进行解码/编码操作。</p><p>为了方便不同开发语言和程序之间进行传输，原始数据会先进行Base64编码成字符串，再通过参数输出，经由外部应用程序的解码/编码处理后，同样以Base64形式接收输入。外部应用程序如果出现处理数据失败（如无法解码等情况），直接输出普通文本<code>[RDM-ERROR]</code>即可。</p><p>基本输出输入流程如下图：</p><p><img src="'+l+`" alt="解码流程"></p><h2 id="创建使用示例" tabindex="-1">创建使用示例 <a class="header-anchor" href="#创建使用示例" aria-label="Permalink to &quot;创建使用示例&quot;">​</a></h2><p>下面将以编写一个PHP序列化器和反序列化器为例子，来说明如何自行构建和使用<code>解码/编码器</code>。</p><h3 id="解码器" tabindex="-1">解码器 <a class="header-anchor" href="#解码器" aria-label="Permalink to &quot;解码器&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($decoded);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $unserialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($obj, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON_UNESCAPED_UNICODE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON_UNESCAPED_SLASHES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($unserialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($unserialized);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[RDM-ERROR]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>将上面代码保存为文件<code>php_decoder.php</code>，可通过命令行进行简单测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_decoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>此处输入的内容<code>YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</code>为文本<code>a:1:{s:6:&quot;你好&quot;;s:8:&quot;tiny_rdm&quot;;}</code>的Base64编码</p></div><p>如果逻辑正确，应该会输出<code>eyLkvaDlpb0iOiJ0aW55X3JkbSJ9</code>，即字符串<code>{&quot;你好&quot;:&quot;tiny_rdm&quot;}</code>的Base64编码。</p><h3 id="编码器" tabindex="-1">编码器 <a class="header-anchor" href="#编码器" aria-label="Permalink to &quot;编码器&quot;">​</a></h3><p>根据上面解码器的示例代码，我们来实现编码器的逻辑</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($decoded, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $serialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($json);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($serialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($serialized);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[RDM-ERROR]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>保存为文件<code>php_encoder.php</code>， 同样可以进行简单测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_encoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eyLkvaDlpb0iOiJ0aW55X3JkbSJ9</span></span></code></pre></div><p>如果一切顺利，将会输出<code>YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</code>。到这一步，自行实现的解码器和编码器都已准备就绪。</p><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><p>完成上面两步所创建的解码器和编码器，我们来总结下其命令行使用方式。 此处编写的是php脚本，依赖php运行，所以使用方式如下：</p><ul><li>解码执行命令</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_decoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {VALUE}</span></span></code></pre></div><ul><li>编码执行命令</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_encoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {VALUE}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>除了通过对应环境运行脚本，也可以运行任意可独立执行的二进制文件，只要能提供命令行界面工具运行方式即可。</p></div><div class="info custom-block"><p class="custom-block-title">说明</p><ul><li><code>/path/to</code>需要替换成对应脚本文件所在目录</li><li><code>{VALUE}</code>为输入到解码器/编码器的原始内容Base64编码字符串<code>占位符</code></li></ul></div><h3 id="添加使用" tabindex="-1">添加使用 <a class="header-anchor" href="#添加使用" aria-label="Permalink to &quot;添加使用&quot;">​</a></h3><p>打开Tiny RDM，依次打开<code>偏好设置</code>=&gt;<code>自定义解码</code>=&gt;<code>新增解码/编码器</code>，填写内容如下：</p><p><img src="`+h+'" alt="自定义编码列表"></p><div class="info custom-block"><p class="custom-block-title">参数说明</p><ul><li><strong>解码器名称</strong>：用于展示在解码下拉列表中的名称</li><li><strong>解码器执行路径</strong>：解码器可执行二进制文件所在路径。由于上述例子需要执行的是php脚本，所以将<code>php cli</code>作为执行文件</li><li><strong>运行参数</strong>：执行外部程序解码所需参数，此处第一个参数为需要执行的php文件路径，第二个为需解码的内容占位符，使用<code>{VALUE}</code>代替。如果不填写内容占位符，则会在执行期间将内容作为最后一个参数传入</li><li><strong>自动解码</strong>：当加载一段尚未被识别类型的内容时，会优先尝试使用此解码器进行解码</li></ul></div><p>同样的，编码器标签页的填写内容如下：</p><p><img src="'+t+'" alt="自定义编码列表"></p><p>确认保存后，就可以在解码列表中找到这个编码选项了！</p><img src="'+k+'" width="240"><p>至此，自定义解码器和编码器都已完成，尝试使用它来打开一个对应编码的键吧~</p>',43),r=[o];function c(E,g,y,F,u,C){return a(),i("div",null,r)}const m=s(d,[["render",c]]);export{_ as __pageData,m as default};
