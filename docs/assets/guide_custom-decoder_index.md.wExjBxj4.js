import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.C9KBZyuy.js";const n="/assets/decode_example.Kb0LJVLg.png",t="/assets/encode_example.CSGiVBcN.png",l="/assets/flow.CE-2VodH.png",h="/assets/add_decoder.Ch4AKn9r.png",p="/assets/add_encoder.C1K8FGlR.png",d="/assets/decode_list.zLrv7mcj.png",C=JSON.parse('{"title":"Custom Decoders and Encoders","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/custom-decoder/index.md","filePath":"guide/custom-decoder/index.md"}'),o={name:"guide/custom-decoder/index.md"},r=a('<h1 id="custom-decoders-and-encoders" tabindex="-1">Custom Decoders and Encoders <a class="header-anchor" href="#custom-decoders-and-encoders" aria-label="Permalink to &quot;Custom Decoders and Encoders&quot;">​</a></h1><p>Tiny RDM provides some built-in decoders for universally standardized data decoding (including Base64, GZip, Deflate, ZStd, Brotli, Msgpack, and more.). But if you need to decode any non-standard data with personalized encoding, try our user-defined decoders and encoders.</p><h2 id="related-concepts" tabindex="-1">Related Concepts <a class="header-anchor" href="#related-concepts" aria-label="Permalink to &quot;Related Concepts&quot;">​</a></h2><p><code>Decoder</code>：Converts the raw content retrieved from database into a human-readable format for display and editing.</p><p><img src="'+n+'" alt="decode example"></p><p><code>Encoder</code>：Converts the human-readable content back into the original raw data for saving.</p><p><img src="'+t+'" alt="encode example"></p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>Tiny RDM decodes and encodes by executing external cli applications.</p><p>To be able to transfer data between different processes, the raw data will encode into Base64 string before pass to the external application as a parameter, it will also return in Base64. If the external application fails to process the data (e.g., unable to decode), just simply return the plain text <code>[RDM-ERROR]</code>.</p><p>The basic input and output workflow looks like below:</p><p><img src="'+l+`" alt="decode flow"></p><h2 id="creating-and-using" tabindex="-1">Creating and Using <a class="header-anchor" href="#creating-and-using" aria-label="Permalink to &quot;Creating and Using&quot;">​</a></h2><p>Let&#39;s walk through an example of creating a PHP serializer and deserializer to demonstrate how to build and use custom decoders and encoders.</p><h3 id="decoder" tabindex="-1">Decoder <a class="header-anchor" href="#decoder" aria-label="Permalink to &quot;Decoder&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($decoded);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $unserialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($obj, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON_UNESCAPED_UNICODE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON_UNESCAPED_SLASHES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($unserialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($unserialized);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[RDM-ERROR]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Save the above code as <code>php_decoder.php</code>, you can can be easily tested from the command line:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_decoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Tip</p><p>The input <code>YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</code> is the Base64 encoding of <code>a:1:{s:6:&quot;你好&quot;;s:8:&quot;tiny_rdm&quot;;}</code></p></div><p>If it works correctly, it should output <code>eyLkvaDlpb0iOiJ0aW55X3JkbSJ9</code>, which is the Base64 encoding of the string <code>{&quot;你好&quot;:&quot;tiny_rdm&quot;}</code>.</p><h3 id="encoder" tabindex="-1">Encoder <a class="header-anchor" href="#encoder" aria-label="Permalink to &quot;Encoder&quot;">​</a></h3><p>Based on the decoder example, let&#39;s implement the encoder logic:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($decoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($decoded, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $serialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($json);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($serialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($serialized);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[RDM-ERROR]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Save this as php_encoder.php, tested with the command line:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_encoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eyLkvaDlpb0iOiJ0aW55X3JkbSJ9</span></span></code></pre></div><p>Until output <code>YToxOntzOjY6IuS9oOWlvSI7czo4OiJ0aW55X3JkbSI7fQ==</code>, both the custom decoder and encoder are ready.</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p>After building decoder and encoder, let&#39;s see how to use them on the command line. Since these are PHP scripts, they rely on the PHP runtime, so the usage is as follows:</p><ul><li>Decode execution command</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_decoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {VALUE}</span></span></code></pre></div><ul><li>Encode execution command</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/php_encoder.php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {VALUE}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Tip</p><p>In addition to running scripts through their respective environments, you can also run any standalone executable binary file, as long as it provides a command-line interface.</p></div><div class="info custom-block"><p class="custom-block-title">说明</p><ul><li><code>/path/to</code>should be replaced with the directory where the script file is located.</li><li><code>{VALUE}</code>is a <code>placeholder</code> for the Base64 input content to be passed to the decoder or encoder.</li></ul></div><h3 id="adding-and-using" tabindex="-1">Adding and Using <a class="header-anchor" href="#adding-and-using" aria-label="Permalink to &quot;Adding and Using&quot;">​</a></h3><p>Open Tiny RDM, and navigate to <code>Preferences</code> =&gt; <code>Custom Decoders</code> =&gt; <code>Add Decoder/Encoder</code>. Fill in as shown below:</p><p><img src="`+h+'" alt="custom decoder list"></p><div class="info custom-block"><p class="custom-block-title">Parameter Description</p><ul><li><strong>Name</strong>: The name displayed in the decoder dropdown list.</li><li><strong>Decoder</strong> Execution Path: The path to the executable binary file. Since the above example requires executing a PHP script, set it to <code>php cli</code>.</li><li><strong>Arguments</strong>: The arguments required to execute the external program for decoding. The first argument is the path to the PHP file to be executed, and the second argument is a placeholder {VALUE} for the content to be decoded. If no placeholder is provided, the content will be passed as the last argument during execution.</li><li><strong>Automatic Decoding</strong>: When loading a piece of content whose type has not yet been recognized, attempts to decode using this decoder are prioritized.</li></ul></div><p>Similarly, fill the Encoder tab as follows:</p><p><img src="'+p+'" alt="custom encoder list"></p><p>After confirming the save, you can find your decode option in the list!</p><img src="'+d+'" width="240"><p>At this point, the custom decoder and encoder are complete. Try using them to open a redis key corresponding to the format~</p>',43),c=[r];function k(g,E,u,y,m,F){return e(),i("div",null,c)}const f=s(o,[["render",k]]);export{C as __pageData,f as default};
